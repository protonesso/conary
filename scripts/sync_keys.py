#!/usr/bin/python
#
# Copyright (c) SAS Institute, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

"""
Script for syncing GPG keys between conary repositories and GPG keyservers.
"""

import sys
from conary.lib import util
sys.excepthook = util.genExcepthook()

import os
import time
import urllib.request, urllib.parse, urllib.error
import tempfile

from conary import conarycfg
from conary import conaryclient
from conary.lib import openpgpfile
from conary.repository import transport

class GPG(object):
    key_servers = ('pgp.mit.edu', )#'subkeys.pgp.net', )

    def __init__(self, pubring=None):
        if not pubring:
            fd, pubring = tempfile.mkstemp()

        self.pubringfn = pubring
        self.tsdbPath = os.path.join(os.path.dirname(self.pubringfn),
            'pubring.tsdb')

        self.keyring = openpgpfile.PublicKeyring(
            self.pubringfn, self.tsdbPath)

    def _downloadKey(self, keyServer, fingerprint):
        print('downloading from %s' % keyServer)
        opener = transport.URLOpener()
        url = ('http://%s:11371/pks/lookup?op=get&search=0x%s'
            % (keyServer, fingerprint))
        handle = opener.open(url)
        keyData = openpgpfile.parseAsciiArmorKey(handle)
        return keyData

    def downloadKey(self, fingerprint):
        e = None
        keyData = None
        for ks in self.key_servers:
            try:
                keyData = self._downloadKey(ks, fingerprint)
                if keyData:
                    break
            except transport.TransportError as e:
                print(('error retrieving PGP key %s'
                    % fingerprint), file=sys.stderr)
                continue

        if not keyData and e:
            raise e

        return keyData

    def _getKey(self, fingerprint, armored=False):
        return openpgpfile.exportKey(fingerprint, self.pubringfn, armored=True)

    def getKey(self, fingerprint, armored=False):
        try:
            return self._getKey(fingerprint, armored=armored)
        except openpgpfile.KeyNotFound:
            pass

        keyData = self.downloadKey(fingerprint)
        self.keyring.addKeysAsStrings([keyData])

        return self._getKey(fingerprint, armored=armored)

    def addKey(self, ascii_key):
        keyData = openpgpfile.parseAsciiArmorKey(ascii_key)
        self.keyring.addKeysAsStrings([keyData])

    def _uploadKey(self, keyServer, key):
        print('uploading to %s' % keyServer)
        opener = transport.URLOpener()
        url = 'http://%s:11371/pks/add' % keyServer
        handle = opener.open(url, data=urllib.parse.urlencode({'keytext': key}),
            method='POST')
        assert handle.code == 200

    def uploadKey(self, ascii_key):
        e = None
        for ks in self.key_servers:
            try:
                self._uploadKey(ks, ascii_key)
            except transport.TransportError as e:
                print('Error uploading key to keyserver %s' % ks, file=sys.stderr)
                continue


class KeySync(object):
    def __init__(self, cfg, keyringfn=None):
        self.cfg = cfg
        self.client = conaryclient.ConaryClient(cfg)

        self.keys = {}
        self.keyring = GPG(pubring=keyringfn)

    def getKey(self, server_name, fingerprint):
        if fingerprint not in self.keys:
            self.keys[fingerprint] = self.client.repos.getAsciiOpenPGPKey(
                server_name, fingerprint)
            self._uploadKeyToKeyServer(fingerprint)
        else:
            print('already cached', file=sys.stderr)
        return self.keys[fingerprint]

    def _uploadKeyToKeyServer(self, fingerprint):
        self.keyring.addKey(self.keys.get(fingerprint))
        self.keyring.uploadKey(self.keys.get(fingerprint))

    def _getKeyFromKeyServer(self, fingerprint):
        return self.keyring.getKey(fingerprint, armored=True)

    def setKey(self, server_name, fingerprint):
        if fingerprint not in self.keys:
            key = self._getKeyFromKeyServer(fingerprint)
            self.keys[fingerprint] = key
        else:
            print('already cached', file=sys.stderr)
        ascii_key = self.keys.get(fingerprint)
        binary_key = openpgpfile.parseAsciiArmorKey(ascii_key)
        ascii_key.seek(0)

        try:
            user = self.cfg.user.find(server_name)[0]
        except:
            print(('could not find user for %s in conary '
                'configuration' % server_name), file=sys.stderr)
            raise

        self.client.repos.addNewPGPKey(server_name, user, binary_key)


def usage(args):
    print('usage: %s <get|set> [keyring]' % args[0], file=sys.stderr)
    return 1

def main(args, fingerprints):
    if len(args) != 3:
        return usage(args)

    cfg = conarycfg.ConaryConfiguration(True)

    keyringfn = args[2]
    sync = KeySync(cfg, keyringfn=keyringfn)

    if args[1] == 'get':
        msg = 'getting'
        method = sync.getKey
    elif args[1] == 'set':
        msg = 'setting'
        method = sync.setKey


    for server_name, fps in fingerprints.items():
        for fp in fps.split():
            fp = fp.strip()
            if not fp:
                continue
            try:
                print('%s: %s %s' % (server_name, msg, fp), file=sys.stdout)
                method(server_name, fp)
            except Exception as e:
                print(str(e), file=sys.stderr)
                return 1

            time.sleep(1)

    return 0

fingerprints_conary = """
00F50BEE168BC07EC49EAEC8992AA82005C54D73
04976B0E5198C1AAC40AC38381386971F45293D7
04D42174CCA6352EABA3579D001E4F77FE9055F6
0BF295FB25531A4D48C1F1214E266C9DFD95929D
0E3969C08D7310681409845E69225C5843DBAB80
14FBA32793D60521B277C0FFD8EA1928E198539C
186CB3644CE4F27929033C9886F9C626C51F11C1
1F7F733634F57CA05E5106C2D946C62231F25839
26160C966180FA3BA8599F74BF389F4413EBE542
4CC5CE1F888408B8093D173DB023858E8122A5E2
58F58BE3EF40C64231A41F88C87F7D60D595CE46
679AE4B2CB9B87AB32A73506F6049ED50ED565B9
7E72A8CAB14F5810A85A199193AE98209C52A966
7F124F5D14DB157407F921EE13B90C8C76E4FDA4
8041CCCCA6E909704E70EF31834C2107AB74561F
82878D97634CC5E7B7B258C2D191EE1E656799D3
848FD300A958AB78193611314C7F00EA78C81B93
95722180A551C8D91A9540F359BF745B3924E87B
9FAD933DD80236C904156605B24E8BB860E0315A
A47B7527A33C4EC008127AAE6D0C8E1EEA2153F1
B5931CC7BBDAA66A0367C87944D893EA5D67321D
C542C38B1A031E2B06294CE47E01F29250E5AF50
C59BAB4A095589A5FA14F0AB2BE99719B41E99E4
C8F04676B56D63E1C47C0AD64FE370CB13BBD9CF
D5099C37686B2C5CD220A77A10F68735E83D2F9D
DAEA1BC38EF8AB4F2DCF0D1EA52068526DE1DDFB
E32E176B9D153ABA5539E6E206E3174D16C7ED80
E9E917B685219FF9A8E7528805C3540CC039D9B3
EC30FCCA71DD0DF27000FC21EE329AC18AB042EE
F074C62DDD86CA090A5C5285DB707A3829245E64
F45D9FD5084A57AA2D9EAA41A3204BF6DAEAF2D1
FF0827E02E8F2106F5B54AD4E6ECCB7145A03AFE
0A406BEE9A84BFC471A5471994AD0C7D2BBF3B5B
F263C434D0213E1D5800CAA5CDA130F74654E2E3
B2F6D086198F4A0CC31393C24B86A8CAE8F8F2CD
29B42FEF051428E938C84EDA61BB0496AD448335
D0487C90CB53648EBE9202B2F326B8BCC2B4C05E
32C7208E362520D371750F5D3F2D946FCCB8F529
77241C5E98B9D70F7B74EDE471468745A467809E
563C386F8078B0DDBEFBA537F30D8AFC54C8D8BD
6C0782E7C8431E32F98E31284AB1F19F15A74D0D
9F836857AB23B712AE7E64A3A3A6B00BB13A46A6
1D2F7263E97DD2C1CCCE58E0A08368135AA90594
3445A46D3C6EC517039EEED9D63070E588503072
CFE1D45E8B016C430F98BA287DE97C69045329D7
53D00B63AF696A3BB7304AB75F279D40FAA798D3
0692BE1FD3A822A75AF60DF5620945387B45577C
1FAB2A9659E384704A1A7F39CCCADA0BE754C4E7
E5DE55791BDC9B416A12971CF7EC3D581BF8D7D4
50DF39A127E8A13E9E31A27C8AC91CFC696CC183
B35C65ED1F75638F4A09B057920335B9E4C95B6D
1A3BEE9641334110CF04DB21A655E7BD5451CB71
57342A5BDBD31C3A2AEB5D37DC4FAE457D7492A1
EDFEF0B64F6E504E92648A44376CC9B0ECA2B08B
649DC9D86CF7D57B0FC3BC22DFF03A6837B4921F
7592F6C707682C0C616CC6F516DE53607EC95BFA
975C1E6FC013FAFDDDB74468E73A00B4B769BBBF
555BD67372CBB23E18D6341874B3D6256519EC21
5495542702825AFDA6E7BA9945037D21F734F673
20C40904B967129A6EA1F65E2C69BA4799F985F3
C1554A870758AC21D6BEDC105FE3EFC56AD0677A
51E4E913D019F6C18FAC52446F263F049D46C946
C7A4EC18622238DB2D8D03E03B781479BE37A507
D0F7EFC3D0799A43B454CDF5CF989C8098149B7C
6EA62BCA639025AAC5CA269DC36203C508FA026C
413C1867113ADF925E8D6BC20B9A12511677EBDE
F47A9BB5037C9DCB414F1EE6AC7DA180BCEDBC3C
7322DA53522F84C3F96F995C019CA29ACAF14A8B
C091CD39DEC328F6CE75B809BCA65301CA329573
81691E63B26851733EBACD841214B495ADAC7F02
CEAAE321F12CCEE7FEC413FD44F1D3BDA379195F
81E314F13D8B71C33FBA05765012CEA2D486FB71
09D65F81949F5A40A2AD6245071362B5ED7C3973
D485E5E449A0A7E45F5301FB7F56919623B07881
0E1DCAB998472B74298E835CB42329C0BDD0E6C9
108F16C3D03763E8651B0E366156AC27E7503102
CBBDC446B00899E2D796E4F398EB0584EB75DAAE
1AF8BB94696E0A78C197BE5ACADF7E55082B2F7F
4D432780EFECBE0C70AE373AF3CF00ADAA0CF08E
783B0730E310FFA7ED30E1E3F10FD735F756F4A8
CC3A63EA63A37034CF177A2CC1C250D0DFB744F9
23A33992E9FA01BEF65346D6DA6064E8299E8576
7D3463E475EC1322F358553BCC2B6DEA3B600332
657F7D893BF2CE0BBD93C87D5613AE17DB3C65C1
4276CFA21AE75CBD176ECF41A0432F6FCEE6E7C0
D56ADB9216A8B495BD730D7481351FE3D983EBC8
553224AC05B03F7A35C4E891E7E90FD7D8F73A47
0D67E1EC90E62FA8E79D0A5BD5B43BCC26A10247
"""

fingerprints_products = """
0E1DCAB998472B74298E835CB42329C0BDD0E6C9
81691E63B26851733EBACD841214B495ADAC7F02
80236516AE92570C9CF078EC781D74AF9FCFC8E7
81E314F13D8B71C33FBA05765012CEA2D486FB71
657F7D893BF2CE0BBD93C87D5613AE17DB3C65C1
DF01147DFD044E98AF25A2EAF75561C39CB77169
F074C62DDD86CA090A5C5285DB707A3829245E64
0DE3D1E44BD02F2A9D7BD11E2BEFD64EA4C45DA7
563C386F8078B0DDBEFBA537F30D8AFC54C8D8BD
3445A46D3C6EC517039EEED9D63070E588503072
8FB7820BF0E0C6905F9A2CE047F31EFC37F43A3F
51E4E913D019F6C18FAC52446F263F049D46C946
9F836857AB23B712AE7E64A3A3A6B00BB13A46A6
B35C65ED1F75638F4A09B057920335B9E4C95B6D
57342A5BDBD31C3A2AEB5D37DC4FAE457D7492A1
649DC9D86CF7D57B0FC3BC22DFF03A6837B4921F
975C1E6FC013FAFDDDB74468E73A00B4B769BBBF
555BD67372CBB23E18D6341874B3D6256519EC21
20C40904B967129A6EA1F65E2C69BA4799F985F3
C7A4EC18622238DB2D8D03E03B781479BE37A507
D0F7EFC3D0799A43B454CDF5CF989C8098149B7C
6EA62BCA639025AAC5CA269DC36203C508FA026C
C1554A870758AC21D6BEDC105FE3EFC56AD0677A
413C1867113ADF925E8D6BC20B9A12511677EBDE
C091CD39DEC328F6CE75B809BCA65301CA329573
B404DE6E944BACD751A421FBBF09D87ADE6D20B8
004A363C67B9A7325E5FF040A98A409CB617CC10
04D42174CCA6352EABA3579D001E4F77FE9055F6
C59BAB4A095589A5FA14F0AB2BE99719B41E99E4
CC3A63EA63A37034CF177A2CC1C250D0DFB744F9
553224AC05B03F7A35C4E891E7E90FD7D8F73A47
3B1C9778600601CCB6A458103DEB6FE22A9CC481
03372C95B95CD8663957ED9ABC0CFD56FA0CB05C
"""

fingerprints_rap = """
0A406BEE9A84BFC471A5471994AD0C7D2BBF3B5B
F263C434D0213E1D5800CAA5CDA130F74654E2E3
1FAB2A9659E384704A1A7F39CCCADA0BE754C4E7
E5DE55791BDC9B416A12971CF7EC3D581BF8D7D4
50DF39A127E8A13E9E31A27C8AC91CFC696CC183
B35C65ED1F75638F4A09B057920335B9E4C95B6D
555BD67372CBB23E18D6341874B3D6256519EC21
20C40904B967129A6EA1F65E2C69BA4799F985F3
57342A5BDBD31C3A2AEB5D37DC4FAE457D7492A1
5495542702825AFDA6E7BA9945037D21F734F673
B404DE6E944BACD751A421FBBF09D87ADE6D20B8
004A363C67B9A7325E5FF040A98A409CB617CC10
04D42174CCA6352EABA3579D001E4F77FE9055F6
C59BAB4A095589A5FA14F0AB2BE99719B41E99E4
F074C62DDD86CA090A5C5285DB707A3829245E64
DF01147DFD044E98AF25A2EAF75561C39CB77169
80236516AE92570C9CF078EC781D74AF9FCFC8E7
0DE3D1E44BD02F2A9D7BD11E2BEFD64EA4C45DA7
563C386F8078B0DDBEFBA537F30D8AFC54C8D8BD
3445A46D3C6EC517039EEED9D63070E588503072
8FB7820BF0E0C6905F9A2CE047F31EFC37F43A3F
51E4E913D019F6C18FAC52446F263F049D46C946
9F836857AB23B712AE7E64A3A3A6B00BB13A46A6
649DC9D86CF7D57B0FC3BC22DFF03A6837B4921F
975C1E6FC013FAFDDDB74468E73A00B4B769BBBF
C7A4EC18622238DB2D8D03E03B781479BE37A507
D0F7EFC3D0799A43B454CDF5CF989C8098149B7C
413C1867113ADF925E8D6BC20B9A12511677EBDE
7322DA53522F84C3F96F995C019CA29ACAF14A8B
81691E63B26851733EBACD841214B495ADAC7F02
81E314F13D8B71C33FBA05765012CEA2D486FB71
09D65F81949F5A40A2AD6245071362B5ED7C3973
CBBDC446B00899E2D796E4F398EB0584EB75DAAE
783B0730E310FFA7ED30E1E3F10FD735F756F4A8
CC3A63EA63A37034CF177A2CC1C250D0DFB744F9
23A33992E9FA01BEF65346D6DA6064E8299E8576
4276CFA21AE75CBD176ECF41A0432F6FCEE6E7C0
D56ADB9216A8B495BD730D7481351FE3D983EBC8
553224AC05B03F7A35C4E891E7E90FD7D8F73A47
03372C95B95CD8663957ED9ABC0CFD56FA0CB05C
"""

fingerprints = {
    'conary.rpath.com': fingerprints_conary,
    'products.rpath.com': fingerprints_products,
    'rap.rpath.com': fingerprints_rap,
}

if __name__ == '__main__':
    sys.exit(main(sys.argv, fingerprints))
